{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","reduce","stateObj","goods","initialState","getActiveGoods","activeGoods","Object","keys","filter","length","jointByAnd","splice","join","concat","changeGoodState","good","setState","prevState","clearSelection","className","this","map","type","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4PAGMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAUIC,E,4MACJC,MAAQF,EAAgBG,QAAO,SAACC,EAAiBC,GAC/C,OAAO,2BAAKD,GAAZ,kBAAuBC,GAAQ,MAC9B,I,EAEHC,a,eAAoB,EAAKJ,O,EAEzBK,eAAiB,WACf,IAAMC,EAAcC,OAAOC,KAAK,EAAKR,OAAOS,QAAO,SAAAN,GAAK,OAAI,EAAKH,MAAMG,MAEvE,GAAIG,EAAYI,OAAQ,CACtB,IAAMC,EAAaL,EAAYM,QAAQ,GAAGC,KAAK,SAG/C,OAFiBP,EAAYQ,OAAOH,GAAYE,KAAK,MAErCH,OAAS,EACrBC,EAAWG,OAAO,gBAClBH,EAAWG,OAAO,eAGxB,MAAO,qB,EAGTC,gBAAkB,SAACC,GACjB,EAAKC,UAAS,SAAAC,GAAS,kCAClBA,GADkB,kBAEpBF,GAAQE,EAAUF,S,EAIvBG,eAAiB,WACf,EAAKF,SAAL,eACK,EAAKb,gB,4CAIZ,WAAU,IAAD,OACP,OACE,sBAAKgB,UAAU,MAAf,UACE,6BAAKC,KAAKhB,mBACV,oBAAIe,UAAU,YAAd,SACGtB,EAAgBwB,KAAI,SAAAN,GACnB,OACE,qBACEI,UAAS,oBACM,EAAKpB,MAAMgB,GAAQ,oBAAsB,IAF1D,UAKE,+BAAOA,IACN,IACD,wBACEO,KAAK,SACLC,QACE,WACE,EAAKT,gBAAgBC,IAJ3B,SAQK,EAAKhB,MAAMgB,GAAiB,SAAR,gBAMjC,wBAAQO,KAAK,SAASC,QAASH,KAAKF,eAApC,sB,GA/DUM,IAAMC,WAuET3B,IC3Ff4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.90914d60.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Props = {};\n\ntype GoodItem = typeof goodsFromServer[number];\ninterface State {\n  [key: GoodItem]: boolean;\n}\n\nclass App extends React.Component<Props, State> {\n  state = goodsFromServer.reduce((stateObj: State, goods: GoodItem) => {\n    return { ...stateObj, [goods]: false };\n  }, {});\n\n  initialState = { ...this.state };\n\n  getActiveGoods = () => {\n    const activeGoods = Object.keys(this.state).filter(goods => this.state[goods]);\n\n    if (activeGoods.length) {\n      const jointByAnd = activeGoods.splice(-2).join(' and ');\n      const jointAll = activeGoods.concat(jointByAnd).join(', ');\n\n      return jointAll.length > 1\n        ? jointByAnd.concat('are selected')\n        : jointByAnd.concat('is selected');\n    }\n\n    return 'No goods selected';\n  };\n\n  changeGoodState = (good: GoodItem) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [good]: !prevState[good],\n    }));\n  };\n\n  clearSelection = () => {\n    this.setState({\n      ...this.initialState,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>{this.getActiveGoods()}</h1>\n        <ul className=\"GoodsList\">\n          {goodsFromServer.map(good => {\n            return (\n              <li\n                className={\n                  `GoodsItem ${this.state[good] ? 'GoodsItem--active' : ''}`\n                }\n              >\n                <span>{good}</span>\n                {' '}\n                <button\n                  type=\"button\"\n                  onClick={\n                    () => {\n                      this.changeGoodState(good);\n                    }\n                  }\n                >\n                  {!(this.state[good]) ? 'Add' : 'Remove'}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n        <button type=\"button\" onClick={this.clearSelection}>X</button>\n      </div>\n    );\n  }\n  // return (\n  // );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}