{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","reduce","stateObj","good","initialState","changeGoodState","setState","prevState","clearSelection","activeGoods","Object","entries","this","goods","goodState","push","length","joinedByAnd","splice","join","concat","className","getActiveGoods","map","type","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4PAGMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAUIC,E,4MACJC,MAAQF,EAAgBG,QAAO,SAACC,EAAiBC,GAC/C,OAAO,2BAAKD,GAAZ,kBAAuBC,GAAO,MAC7B,I,EAEHC,a,eAAoB,EAAKJ,O,EAoBzBK,gBAAkB,SAACF,GACjB,EAAKG,UAAS,SAAAC,GAAS,kCAClBA,GADkB,kBAEpBJ,GAAQI,EAAUJ,S,EAIvBK,eAAiB,WACf,EAAKF,SAAL,eACK,EAAKF,gB,oDA3BZ,WACE,IAAMK,EAAcC,OAAOC,QAAQC,KAAKZ,OAAOC,QAAO,SAACY,EAAiBC,GAKtE,OAJIA,EAAU,IACZD,EAAME,KAAKD,EAAU,IAGhBD,IACN,IAEH,GAAIJ,EAAYO,OAAQ,CACtB,IAAMC,EAAcR,EAAYS,QAAQ,GAAGC,KAAK,SAEhD,OAAOV,EAAYW,OAAOH,GAAaE,KAAK,MAAMC,OAAO,iBAG3D,MAAO,sB,oBAgBT,WAAU,IAAD,OACP,OACE,sBAAKC,UAAU,MAAf,UACE,6BAAKT,KAAKU,mBACV,oBAAID,UAAU,YAAd,SACGvB,EAAgByB,KAAI,SAAApB,GACnB,OACE,qBACEkB,UAAS,oBACM,EAAKrB,MAAMG,GAAQ,oBAAsB,IAF1D,UAKE,+BAAOA,IACN,IACD,wBACEqB,KAAK,SACLC,QACE,WACE,EAAKpB,gBAAgBF,IAJ3B,SAQK,EAAKH,MAAMG,GAAiB,SAAR,gBAMjC,wBAAQqB,KAAK,SAASC,QAASb,KAAKJ,eAApC,sB,GAlEUkB,IAAMC,WA0ET5B,IC9Ff6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2ef10842.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Props = {};\n\ntype GoodItem = typeof goodsFromServer[number];\ninterface State {\n  [key: GoodItem]: boolean;\n}\n\nclass App extends React.Component<Props, State> {\n  state = goodsFromServer.reduce((stateObj: State, good: GoodItem) => {\n    return { ...stateObj, [good]: false };\n  }, {});\n\n  initialState = { ...this.state };\n\n  getActiveGoods() {\n    const activeGoods = Object.entries(this.state).reduce((goods: string[], goodState) => {\n      if (goodState[1]) {\n        goods.push(goodState[0]);\n      }\n\n      return goods;\n    }, []);\n\n    if (activeGoods.length) {\n      const joinedByAnd = activeGoods.splice(-2).join(' and ');\n\n      return activeGoods.concat(joinedByAnd).join(', ').concat(' are selected');\n    }\n\n    return 'No goods selected';\n  }\n\n  changeGoodState = (good: GoodItem) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [good]: !prevState[good],\n    }));\n  };\n\n  clearSelection = () => {\n    this.setState({\n      ...this.initialState,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>{this.getActiveGoods()}</h1>\n        <ul className=\"GoodsList\">\n          {goodsFromServer.map(good => {\n            return (\n              <li\n                className={\n                  `GoodsItem ${this.state[good] ? 'GoodsItem--active' : ''}`\n                }\n              >\n                <span>{good}</span>\n                {' '}\n                <button\n                  type=\"button\"\n                  onClick={\n                    () => {\n                      this.changeGoodState(good);\n                    }\n                  }\n                >\n                  {!(this.state[good]) ? 'Add' : 'Remove'}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n        <button type=\"button\" onClick={this.clearSelection}>X</button>\n      </div>\n    );\n  }\n  // return (\n  // );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}